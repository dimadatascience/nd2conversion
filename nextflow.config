/**************************** Basic parameters ****************************/

params {
    // User input parameters
    work_dir = ""
    sample_sheet_path = ""
    
    // User input-dependent parameters
    input_dir = "${params.work_dir}/data/input"
    output_dir = "${params.work_dir}/data/output"
    logs_dir = "${params.work_dir}/logs"
    backup_dir = "${params.logs_dir}/io/backups"
    
    // Publish directories
    output_dir_conv = "${params.output_dir}/image_conversion" // Image conversion
    output_dir_reg = "${params.output_dir}/image_registration" // Image registration

    // Intermediate process directories
    crops_dir_fixed = "${params.work_dir}/data/crops"
    crops_dir_moving = "${params.work_dir}/data/registered_crops/affine/"
    mappings_dir = "${params.work_dir}/data/mappings"
    registered_crops_dir = "${params.work_dir}/data/registered_crops"
    

    // Process parameters
    //// Image conversion
    tilex = 512 
    tiley = 512 
    pyramid_resolutions = 3 
    pyramid_scale = 2

    //// Image registration
    crop_width_x = 900
    crop_width_y = 900
    overlap_x = 200
    overlap_y = 200
    delete_checkpoints = ""
    max_workers = 5
}

// Process-specific configuration
process {
    executor = "local"
    maxForks = 1 // Maximum parallel jobs for the 'local' executor
}

/**************************** Profiles ****************************/

profiles {
    debug { process.beforeScript = "echo $HOSTNAME" }

    docker {
        docker.enabled         = true
        docker.userEmulation   = { params.use_gatk_spark ? false : true }.call()
        charliecloud.enabled   = false
        podman.enabled         = false
        shifter.enabled        = false
        singularity.enabled    = false
        //process.container = "docker://yinxiu/variantalker:v1.0"
    }

    singularity {
        singularity.autoMounts = true
        singularity.enabled    = true
        singularity.runOptions = " --bind /hpcnfs/ --bind /hpcscratch "
        charliecloud.enabled   = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        //process.container = "docker://yinxiu/variantalker:v1.0"
    }
}

/**************************** Manifest ****************************************************/

manifest {
    name            = "image_registration_pipeline"
    author          = """Alessio Chiodin, Yinxiu Zhan"""
    homePage        = "https://github.com/dimadatascience/image_registration_pipeline"
    description     = """Pipeline to convert and register .nd2 images."""
    mainScript      = "main.nf"
    nextflowVersion = "!>=22.10.1"
    version         = "1.0.0"
}

/**************************** Tower ****************************************************/

tower {
    enabled = true
}

// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
    if (type == "memory") {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == "time") {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == "cpus") {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
